import React, { useState, useEffect } from "react";
import API from '../api'; // import api.js
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import "../styles/Dashboard.css";
import { FaChartBar, FaChartPie } from "react-icons/fa";

const Dashboard = () => {
  const [data, setData] = useState([]);
  const [chartType, setChartType] = useState("bar");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [selectedMonth, setSelectedMonth] = useState("");
  const [selectedYear, setSelectedYear] = useState("");
  const [showFilters, setShowFilters] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await API.get("/api/expenses", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setData(response.data);
      } catch (error) {
        console.error("Error fetching expenses:", error);
      }
    };
    fetchData();
  }, []);

  const getFilteredData = () =>
    data.filter((item) => {
      const itemDate = new Date(item.date);
      const itemMonth = (itemDate.getMonth() + 1).toString();
      const itemYear = itemDate.getFullYear().toString();

      const isInRange =
        (!startDate || new Date(item.date) >= new Date(startDate)) &&
        (!endDate || new Date(item.date) <= new Date(endDate));

      const matchMonth = selectedMonth ? itemMonth === selectedMonth : true;
      const matchYear = selectedYear ? itemYear === selectedYear : true;

      return isInRange && matchMonth && matchYear;
    });

  const getCategoryTotals = () => {
    const totals = {};
    getFilteredData().forEach((exp) => {
      totals[exp.title] = (totals[exp.title] || 0) + Number(exp.amount);
    });
    return Object.entries(totals).map(([title, amount]) => ({ title, amount }));
  };

  const handleGeneratePDF = () => {
    const filteredData = getFilteredData();
    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(24);
    doc.setTextColor(0, 102, 204);
    doc.text("Xpens Tracker", 14, 20);

    const now = new Date();
    const formattedDate = now.toLocaleDateString("en-GB", {
      day: "2-digit",
      month: "short",
      year: "numeric",
    });
    doc.setFontSize(10);
    doc.setTextColor(90);
    doc.text(`${formattedDate}`, 200, 20, { align: "right" });

    doc.setFontSize(16);
    doc.setTextColor(40);
    doc.text("Expense Report Summary", 14, 32);

    let currentY = 40;
    if (startDate || endDate) {
      doc.setFontSize(11);
      doc.setTextColor(60);
      doc.text(`ðŸ“… Range: ${startDate || "Start"} to ${endDate || "End"}`, 14, currentY);
      currentY += 8;
    }

    if (selectedMonth || selectedYear) {
      const monthName = selectedMonth
        ? new Date(0, parseInt(selectedMonth) - 1).toLocaleString("default", { month: "long" })
        : "All Months";
      const yearName = selectedYear || "All Years";
      doc.setFontSize(11);
      doc.setTextColor(60);
      doc.text(`Period: ${monthName} / ${yearName}`, 14, currentY);
      currentY += 8;
    }

    const total = filteredData.reduce((sum, item) => sum + Number(item.amount), 0);
    doc.setFontSize(12);
    doc.setTextColor(34, 139, 34);
    doc.text(
      `Total Spent: Rs. ${total.toLocaleString("en-IN", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      14,
      currentY
    );
    currentY += 10;

    const tableColumn = ["Title", "Amount", "Date", "Payment Mode", "Status"];
    const tableRows = filteredData.map((item) => [
      item.title || "",
      "Rs. " + Number(item.amount).toLocaleString("en-IN", { minimumFractionDigits: 2, maximumFractionDigits: 2 }),
      new Date(item.date).toLocaleDateString("en-GB"),
      item.payMode?.trim() || "N/A",
      item.status?.trim() || "N/A",
    ]);

    autoTable(doc, {
      startY: currentY,
      head: [tableColumn],
      body: tableRows,
      theme: "striped",
      styles: { fontSize: 10, font: "times", cellPadding: 4 },
      headStyles: { fillColor: [0, 102, 204], textColor: 255, halign: "center" },
      alternateRowStyles: { fillColor: [240, 248, 255] },
      margin: { top: 10, bottom: 30 },
    });

    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text("Generated by Xpens", 14, 290);
    doc.setDrawColor(230);
    doc.line(14, 286, 200, 286);

    doc.save(`Expense_Report_${now.toISOString().slice(0, 10)}.pdf`);
  };

  const COLORS = ["#4CAF50", "#FF9800", "#2196F3", "#9C27B0", "#f44336", "#00BCD4"];

  const renderChart = () => {
    const chartData = getCategoryTotals();
    if (chartType === "pie") {
      return (
        <ResponsiveContainer width="100%" height={400}>
          <PieChart>
            <Pie data={chartData} dataKey="amount" nameKey="title" cx="50%" cy="50%" outerRadius={140} label>
              {chartData.map((_, index) => (
                <Cell key={index} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip />
          </PieChart>
        </ResponsiveContainer>
      );
    }

    return (
      <ResponsiveContainer width="100%" height={400}>
        <BarChart data={chartData} margin={{ top: 30, right: 20, bottom: 5, left: 0 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="title" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="amount" fill="rgba(75, 165, 78, 1)" />
        </BarChart>
      </ResponsiveContainer>
    );
  };

  return (
    <div className="dashboard-wrapper">
      {/* Mobile toggle button */}
      <button className="mobile-toggle" onClick={() => setShowFilters(!showFilters)}>
        {showFilters ? "Show Charts" : "Show Filters"}
      </button>

      {/* Sidebar */}
      <aside className={`sidebar ${!showFilters ? "mobile-hidden" : ""}`}>
        <h3>Filters & Options</h3>

        <h4>Generate PDF</h4>
        <label>Start Date:</label>
        <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />

        <label>End Date:</label>
        <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />

        <label>Month:</label>
        <select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)}>
          <option value="">All</option>
          {[...Array(12)].map((_, i) => (
            <option key={i} value={(i + 1).toString()}>
              {new Date(0, i).toLocaleString("default", { month: "long" })}
            </option>
          ))}
        </select>

        <label>Year:</label>
        <select value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)}>
          <option value="">All</option>
          {[...new Set(data.map((e) => new Date(e.date).getFullYear()))].map((y) => (
            <option key={y} value={y}>{y}</option>
          ))}
        </select>

        <button className="generate-btn" onClick={handleGeneratePDF}>
          Generate Report
        </button>
      </aside>

      {/* Chart section */}
      <main className={`dashboard-main ${showFilters ? "mobile-hidden" : ""}`}>
  <h2 className="dashboard-title">Spending Overview</h2>
  <p className="dashboard-description">
    This section provides a visual breakdown of your expenses by category.
    Use the filters to view your spending patterns.
  </p>

  {/* Mobile Chart Toggle */}
  <div className="mobile-chart-toggle">
   <button className={chartType === "bar" ? "active" : ""} onClick={() => setChartType("bar")}>
      <FaChartBar style={{ marginRight: "6px" }} /> Bar Chart
    </button>
    <button className={chartType === "pie" ? "active" : ""} onClick={() => setChartType("pie")}>
      <FaChartPie style={{ marginRight: "6px" }} /> Pie Chart
    </button>
  </div>

  {/* Desktop Chart Buttons */}
  <div className="desktop-chart-buttons">
    <button className={chartType === "bar" ? "active" : ""} onClick={() => setChartType("bar")}>
      <FaChartBar style={{ marginRight: "6px" }} /> Bar Chart
    </button>
    <button className={chartType === "pie" ? "active" : ""} onClick={() => setChartType("pie")}>
      <FaChartPie style={{ marginRight: "6px" }} /> Pie Chart
    </button>
  </div>

  <div className="chart-section animate-chart">{renderChart()}</div>
</main>
    </div>
  );
};

export default Dashboard;
